///////////////////////////////////////////////////////////////////////////////////////
//
// ETF-TopoX
//
///////////////////////////////////////////////////////////////////////////////////////

buildscript {
	repositories {
		maven {
			url "https://services.interactive-instruments.de/etfdev-af/plugins-releases-local"
			credentials {
				// Our repository requires authenticating
				username 'ii-bda'
				password 'AP7mb4WA6F1ckdZkaE8Qx8GSowt'
			}}
		mavenCentral()
	}
	dependencies {
		classpath group: 'de.interactive_instruments.bda', name: 'etf-bda', version: '[2.0.3,2.0.99]'
		classpath ("org.junit.platform:junit-platform-gradle-plugin:1.2.0")
	}
	dependencies {
		ant.unjar src: configurations.classpath.files.find {it.path.contains('etf')}, dest: 'build/gradle'
	}
}
apply from: 'build/gradle/ii-bda.gradle'
apply plugin: 'org.junit.platform.gradle.plugin'


///////////////////////////////////////////////////////////////////////////////////////

group = 'de.interactive_instruments.etf.testdriver.bsxm'
description = "Extension module for the ETF Basex testdriver to create topological graph structures"

ext.basexVersion = '9.2.4'

configurations {
	umlDoclet
    runtime.exclude group: "org.slf4j", module: "slf4j-nop"
}

repositories {
    maven {
        url 'https://jetbrains.bintray.com/intellij-third-party-dependencies/'
    }
}

dependencies {
	compile group: 'de.interactive_instruments', name: 'ii-commons-util', version: '3.0.0' + project.snapshotSuffix
	compile group: 'org.jetbrains.intellij.deps', name: 'trove4j', version: '1.0.20160824'

	umlDoclet "nl.talsmasoftware:umldoclet:1.0.16"

	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
	testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
	testCompile 'com.tngtech.archunit:archunit-junit5-api:0.9.1'
	testRuntime 'com.tngtech.archunit:archunit-junit5-engine:0.9.1'
	testCompile group: 'ch.qos.logback', name: 'logback-classic', version: etf_logbackVersion
	testCompile group: 'de.interactive_instruments', name: 'ii-commons-util', version:'3.0.0'+project.snapshotSuffix

	testCompile "org.xmlunit:xmlunit-core:2.6.2"
	testCompile "org.basex:basex:$basexVersion"
	testRuntime "org.basex:basex:$basexVersion"
	compileOnly "org.basex:basex-api:$basexVersion"
	testCompile "org.basex:basex-api:$basexVersion"
}

// Support JUnit 5 in gradle < 4.6
test {
	testLogging {
		events 'PASSED', 'FAILED', 'SKIPPED'
	}

	afterSuite { desc, result ->
		if (!desc.parent) {
			println "\nTest result: ${result.resultType}"
			println "Test summary: ${result.testCount} tests, " +
					"${result.successfulTestCount} succeeded, " +
					"${result.failedTestCount} failed, " +
					"${result.skippedTestCount} skipped"
		}
	}
}

sourceSets {
  test {
    resources {
      srcDir 'src/test/resources'
      srcDir 'src/main/resources'
    }
  }
}

def dependencyLibs =
		configurations.compile.filter { it.name.startsWith('trove') } +
		configurations.compile.filter { it.name.startsWith('ii-commons-util') }

jar {
	archiveName = "topox.jar"
}

javadoc {
	source = sourceSets.main.allJava
	options.docletpath = configurations.umlDoclet.files.asType(List)
	options.doclet = "nl.talsmasoftware.umldoclet.UMLDoclet"
	options.addStringOption "umlImageFormat", "SVG"
	options.addStringOption "umlIncludeHyperlinks", "true"
	options.addStringOption "umlBasePath", "docs/javadoc"
	destinationDir = file("$projectDir/docs/javadoc")
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}


task xar(type: Jar, dependsOn: jar) {
	doFirst {
		manifest {
			attributes(
					jar.manifest.getAttributes()
			)
		}
	}
	group = 'build'
	archiveName = 'TopoX.xar'
	extension = 'xar'
	into('topox') {
		from jar
		from dependencyLibs
		from file("$projectDir/src/main/xquery/TopoX.xq")
	}

	into('') {
		from file("$projectDir/src/packaging/expath-pkg.xml")
		filter{ it.replaceAll('@@libVersion@@', project.version)}
	}
	from file("$projectDir/src/packaging/basex.xml")
}


artifacts {
	archives xar
	archives sourcesJar
}

junitPlatformTest.dependsOn xar
xar.mustRunAfter jar
